#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä Modbus TCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import logging
from pymodbus.datastore import ModbusSequentialDataBlock, ModbusServerContext, ModbusSlaveContext
from pymodbus.server import StartTcpServer
from pymodbus.device import ModbusDeviceIdentification

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)


class CustomDataBlock(ModbusSequentialDataBlock):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø–∏—Å–µ–π"""
    
    def setValues(self, address, values):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info(f"üìù –ó–ê–ü–ò–°–¨: —Ç–∏–ø=Holding Register, –∞–¥—Ä–µ—Å={address}, –∑–Ω–∞—á–µ–Ω–∏—è={values}")
        return super().setValues(address, values)


class CustomCoilDataBlock(ModbusSequentialDataBlock):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Coils —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def setValues(self, address, values):
        logger.info(f"üìù –ó–ê–ü–ò–°–¨: —Ç–∏–ø=Coil, –∞–¥—Ä–µ—Å={address}, –∑–Ω–∞—á–µ–Ω–∏—è={values}")
        return super().setValues(address, values)


class CustomSlaveContext(ModbusSlaveContext):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def validate(self, fx, address, count=1):
        """–õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏"""
        result = super().validate(fx, address, count)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        op_type = "–ß–¢–ï–ù–ò–ï"
        if fx in [5, 6, 15, 16]:  # –ö–æ–¥—ã —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–ø–∏—Å–∏
            op_type = "–ó–ê–ü–ò–°–¨"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        data_type = "Unknown"
        if fx in [1, 5, 15]:  # Coils
            data_type = "Coil"
        elif fx in [2]:  # Discrete Inputs
            data_type = "Discrete Input"
        elif fx in [3, 6, 16]:  # Holding Registers
            data_type = "Holding Register"
        elif fx in [4]:  # Input Registers
            data_type = "Input Register"
        
        logger.info(f"üîç –û–ü–ï–†–ê–¶–ò–Ø: {op_type}, —Ç–∏–ø={data_type}, —Ñ—É–Ω–∫—Ü–∏—è={fx}, –∞–¥—Ä–µ—Å={address}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={count}")
        return result


def run_server():
    """–ó–∞–ø—É—Å–∫ Modbus TCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤"""

    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    hr_data = [i * 10 for i in range(100)]
    hr_block = CustomDataBlock(0, hr_data)

    co_data = [i % 2 == 0 for i in range(100)]
    co_block = CustomCoilDataBlock(0, co_data)

    ir_data = [i * 100 for i in range(100)]
    ir_block = ModbusSequentialDataBlock(0, ir_data)

    di_data = [i % 3 == 0 for i in range(100)]
    di_block = ModbusSequentialDataBlock(0, di_data)

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    slave_context = CustomSlaveContext(
        di=di_block,
        co=co_block,
        hr=hr_block,
        ir=ir_block,
        zero_mode=True,
    )

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = ModbusServerContext(slaves=slave_context, single=True)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    identity = ModbusDeviceIdentification()
    identity.VendorName = 'Custom Modbus Server'
    identity.ProductCode = 'PM'
    identity.VendorUrl = 'http://github.com/'
    identity.ProductName = 'Python Modbus Server'
    identity.ModelName = 'Python Modbus'
    identity.MajorMinorRevision = '1.0.0'

    logger.info("–ó–∞–ø—É—Å–∫ Modbus TCP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ localhost:5020")
    logger.info("–°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã")
    logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    logger.info(f"  Holding Registers (0-99): {hr_data[:10]}...")
    logger.info(f"  Coils (0-99): {co_data[:10]}...")
    logger.info(f"  Input Registers (0-99): {ir_data[:10]}...")
    logger.info(f"  Discrete Inputs (0-99): {di_data[:10]}...")
    logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    StartTcpServer(
        context=context,
        address=("localhost", 5020),
        identity=identity,
    )


if __name__ == "__main__":
    try:
        run_server()
    except KeyboardInterrupt:
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")