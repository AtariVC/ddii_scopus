#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Modbus TCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
"""

from pymodbus.client import ModbusTcpClient
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_modbus_server():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Modbus —Å–µ—Ä–≤–µ—Ä–∞"""
    
    client = ModbusTcpClient('localhost', port=5020)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        connection = client.connect()
        if connection:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ß—Ç–µ–Ω–∏–µ Holding Registers (–∞–Ω–∞–ª–æ–≥: modbus read localhost 5020 0 10)
            result = client.read_holding_registers(address=0, count=10, slave=1)
            if not result.isError():
                logger.info(f"üìñ Holding Registers 0-9: {result.registers}")
            else:
                logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
                
            # –ß—Ç–µ–Ω–∏–µ Coils
            result = client.read_coils(address=0, count=10, slave=1)
            if not result.isError():
                logger.info(f"üìñ Coils 0-9: {result.bits}")
            else:
                logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞—Ç—É—à–µ–∫")
                
            # –ó–∞–ø–∏—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä (–∞–Ω–∞–ª–æ–≥: modbus write localhost 5020 5 999)
            client.write_registers(address=14, values=[0x01, 0x12], slave=1)
            logger.info("üìù –ó–∞–ø–∏—Å–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 999 –≤ —Ä–µ–≥–∏—Å—Ç—Ä 5")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å
            result = client.read_holding_registers(address=5, count=1, slave=1)
            if not result.isError():
                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–µ–≥–∏—Å—Ç—Ä 5 = {result.registers[0]}")
                
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        client.close()
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")

if __name__ == "__main__":
    test_modbus_server()